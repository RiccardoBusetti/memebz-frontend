{"version":3,"sources":["components/meme/addmemedialog/AddMemeDialog.js","util/cloudinary.js","util/date.js","components/meme/memecommentsdialog/MemeCommentsDialog.js","components/meme/memecard/MemeCard.js","components/meme/memeslist/MemesList.js","components/Home.js","components/App.js","serviceWorker.js","index.js"],"names":["ADD_MEME","gql","useStyles","makeStyles","theme","header","marginBottom","spacing","marginTop","progress","margin","AddMemeDialog","props","classes","useTheme","fullScreen","useMediaQuery","breakpoints","down","useState","meme","setMeme","files","setFiles","isUploadingImage","setUploadingImage","useMutation","onCompleted","data","onDialogClose","addMeme","addingMeme","loading","Dialog","open","isOpen","DialogTitle","DialogContent","DialogContentText","Grid","container","direction","justify","alignItems","CircularProgress","className","item","xs","Typography","variant","TextField","autoFocus","type","fullWidth","onChange","e","title","target","value","author","component","acceptedFiles","dropzoneText","filesLimit","DialogActions","Button","color","onClick","length","file","success","url","process","name","request","post","field","end","error","response","body","uploadPhoto","variables","input","imageUrl","secure_url","fromNow","timestamp","dateAsString","moment","unix","parseInt","format","timestampToString","GET_COMMENTS","COMMENT_MADE","ADD_COMMENT","dialogTitle","display","justifyContent","commentField","marginStart","marginEnd","MemeCommentsDialog","comments","setComments","newCommentContent","setNewCommentContent","useQuery","memeId","id","addComment","useSubscription","onSubscriptionData","commentMade","subscriptionData","disableTypography","IconButton","aria-label","map","comment","key","Chip","label","content","dateCommented","onKeyPress","ev","UP_VOTE_MEME","DOWN_VOTE_MEME","UP_VOTE_MADE","DOWN_VOTE_MADE","root","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","commentChip","MemesCard","isCommentsModelOpen","setCommentsModalOpen","isImageModalOpen","setImageModalOpen","upVoteMeme","upVoting","downVoteMeme","downVoting","upVoteMade","upVotes","downVoteMade","downVotes","Card","CardHeader","Avatar","action","subheader","dateCreated","CardMedia","image","CardActions","disableSpacing","lastComments","medium","showRotate","hideZoom","alt","onClose","GET_MEMES","padding","MemesList","refetch","memes","filter","includes","sm","flexGrow","menuButton","marginRight","up","search","position","borderRadius","shape","fade","palette","common","white","width","searchIcon","pointerEvents","inputRoot","inputInput","paddingLeft","fab","unit","bottom","right","Home","isDialogOpen","setDialogOpen","setRefetch","setFilter","AppBar","Toolbar","noWrap","InputBase","placeholder","inputProps","Fab","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ee53c4ea.chunk.js","sourcesContent":["import { useMutation } from '@apollo/react-hooks';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport gql from 'graphql-tag';\nimport React, { useState } from 'react';\nimport DropzoneArea from 'react-dropzone-material-ui';\nimport { uploadPhoto } from '../../../util/cloudinary';\n\nconst ADD_MEME = gql`\n  mutation addMeme($input: AddMemeInput!) {\n    addMeme(input: $input) {\n      id\n    }\n  }\n`;\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    marginBottom: theme.spacing(1),\n    marginTop: theme.spacing(1),\n  },\n  progress: {\n    margin: theme.spacing(2),\n  },\n}));\n\nfunction AddMemeDialog(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const [meme, setMeme] = useState({});\n  const [files, setFiles] = useState([]);\n  const [isUploadingImage, setUploadingImage] = useState(false);\n\n  const [addMeme, { loading: addingMeme }] = useMutation(ADD_MEME, {\n    onCompleted: (data) => {\n      props.onDialogClose(true);\n    },\n  });\n\n  return (\n    <Dialog open={props.isOpen} fullScreen={fullScreen}>\n      <DialogTitle>Upload a new meme</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          To upload a new meme, please fill in the form below and let the fun begin!\n        </DialogContentText>\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={2}>\n          {isUploadingImage || addingMeme ? (\n            <CircularProgress className={classes.progress} item xs={12} />\n          ) : (\n            <>\n              <Grid item xs={12}>\n                <Typography className={classes.header} variant=\"body1\">\n                  Give a cool title to your meme:\n                </Typography>\n                <TextField\n                  autoFocus\n                  margin=\"dense\"\n                  type=\"text\"\n                  variant=\"outlined\"\n                  fullWidth\n                  onChange={(e) =>\n                    setMeme({\n                      ...meme,\n                      title: e.target.value,\n                    })\n                  }\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <Typography className={classes.header} variant=\"body1\">\n                  Choose your (possibly funny) name:\n                </Typography>\n                <TextField\n                  autoFocus\n                  margin=\"dense\"\n                  type=\"text\"\n                  variant=\"outlined\"\n                  fullWidth\n                  onChange={(e) =>\n                    setMeme({\n                      ...meme,\n                      author: e.target.value,\n                    })\n                  }\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <Typography className={classes.header} variant=\"body1\" component=\"h2\">\n                  Choose your meme image (pls not too many cats):\n                </Typography>\n                <DropzoneArea\n                  acceptedFiles={['image/*']}\n                  dropzoneText={'Choose your meme file'}\n                  filesLimit={1}\n                  onChange={setFiles}\n                />\n              </Grid>\n            </>\n          )}\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        {!isUploadingImage && !addingMeme ? (\n          <>\n            <Button color=\"primary\" onClick={() => props.onDialogClose(false)}>\n              Cancel\n            </Button>\n            {files.length > 0 && (\n              <Button\n                color=\"primary\"\n                onClick={() => {\n                  setUploadingImage(true);\n                  uploadPhoto(files[0], (response) => {\n                    setUploadingImage(false);\n                    addMeme({\n                      variables: {\n                        input: {\n                          ...meme,\n                          imageUrl: response.secure_url,\n                        },\n                      },\n                    });\n                    setMeme({});\n                    setFiles([]);\n                  });\n                }}\n              >\n                Add meme\n              </Button>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default AddMemeDialog;\n","import request from 'superagent';\n\nexport function uploadPhoto(file, success) {\n  const url = `https://api.cloudinary.com/v1_1/${process.env.REACT_APP_CLOUD_NAME}/upload`;\n\n  const title = file.name;\n\n  request\n    .post(url)\n    .field('upload_preset', process.env.REACT_APP_UPLOAD_PRESET)\n    .field('file', file)\n    .field('multiple', true)\n    .field('context', title ? `photo=${title}` : '')\n    .end((error, response) => {\n      if (!error) {\n        success(response.body);\n      }\n    });\n}\n","import moment from 'moment';\n\nconst DATE_TIME_FORMAT = 'DD MMM YYYY hh:mm a';\n\n// TODO: fix date parsing\n\nexport function timestampToString(timestamp) {\n  return moment.unix(parseInt(timestamp) / 1000).format(DATE_TIME_FORMAT);\n}\n\nexport function fromNow(timestamp) {\n  const dateAsString = timestampToString(timestamp);\n  return moment(dateAsString, DATE_TIME_FORMAT).fromNow();\n}\n","import { useMutation, useQuery, useSubscription } from '@apollo/react-hooks';\nimport Chip from '@material-ui/core/Chip';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport { makeStyles } from '@material-ui/core/styles';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport CloseIcon from '@material-ui/icons/Close';\nimport gql from 'graphql-tag';\nimport React, { useState } from 'react';\nimport { fromNow } from '../../../util/date';\n\nconst GET_COMMENTS = gql`\n  query comments($input: CommentInput!) {\n    comments(input: $input) {\n      id\n      content\n      dateCommented\n    }\n  }\n`;\n\nconst COMMENT_MADE = gql`\n  subscription commentMade($input: CommentInput!) {\n    commentMade(input: $input) {\n      id\n      content\n      dateCommented\n    }\n  }\n`;\n\nconst ADD_COMMENT = gql`\n  mutation addCommentOnMeme($input: AddCommentInput!) {\n    addCommentOnMeme(input: $input) {\n      id\n      memeId\n      content\n    }\n  }\n`;\n\nconst useStyles = makeStyles((theme) => ({\n  dialogTitle: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  commentField: {\n    marginStart: theme.spacing(1),\n    marginEnd: theme.spacing(1),\n  },\n}));\n\nfunction MemeCommentsDialog(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const [comments, setComments] = useState([]);\n  const [newCommentContent, setNewCommentContent] = useState('');\n\n  const { loading } = useQuery(GET_COMMENTS, {\n    variables: {\n      input: {\n        memeId: props.meme.id,\n      },\n    },\n    onCompleted: (data) => {\n      setComments([...comments, ...data.comments]);\n    },\n  });\n\n  const [addComment] = useMutation(ADD_COMMENT);\n\n  useSubscription(COMMENT_MADE, {\n    variables: { input: { memeId: props.meme.id } },\n    onSubscriptionData: ({\n      subscriptionData: {\n        data: { commentMade },\n      },\n    }) => {\n      setComments([...comments, commentMade]);\n    },\n  });\n\n  return (\n    <Dialog open={props.isOpen} fullScreen={fullScreen} fullWidth={true}>\n      <DialogTitle className={classes.dialogTitle} disableTypography>\n        <Typography variant=\"h6\">Comments</Typography>\n        <IconButton color=\"inherit\" aria-label=\"close\" onClick={() => props.onDialogClose()}>\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent>\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={2}>\n          {loading ? (\n            <CircularProgress className={classes.progress} item xs={12} />\n          ) : (\n            <>\n              {comments.map((comment) => (\n                <Grid item key={comment.id} xs={12}>\n                  <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"flex-end\">\n                    <Grid item>\n                      <Chip label={comment.content} variant=\"outlined\" />\n                    </Grid>\n                    <Grid item>\n                      <Typography variant=\"caption\">{fromNow(comment.dateCommented)}</Typography>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              ))}\n            </>\n          )}\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          type=\"text\"\n          value={newCommentContent}\n          variant=\"outlined\"\n          fullWidth\n          label={`Commment under ${props.meme.title}`}\n          onChange={(e) => setNewCommentContent(e.target.value)}\n          onKeyPress={(ev) => {\n            if (ev.key === 'Enter') {\n              addComment({\n                variables: {\n                  input: {\n                    memeId: props.meme.id,\n                    content: newCommentContent,\n                  },\n                },\n              });\n              setNewCommentContent('');\n            }\n          }}\n        />\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default MemeCommentsDialog;\n","import { useMutation, useSubscription } from '@apollo/react-hooks';\nimport Avatar from '@material-ui/core/Avatar';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { red } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ArrowDownwardRoundedIcon from '@material-ui/icons/ArrowDownwardRounded';\nimport ArrowUpwardRoundedIcon from '@material-ui/icons/ArrowUpwardRounded';\nimport ChatRoundedIcon from '@material-ui/icons/ChatRounded';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport gql from 'graphql-tag';\nimport React, { useState } from 'react';\nimport { Lightbox } from 'react-modal-image';\nimport { fromNow } from '../../../util/date';\nimport MemeCommentsDialog from '../memecommentsdialog/MemeCommentsDialog';\n\nconst UP_VOTE_MEME = gql`\n  mutation upVoteMeme($input: VoteInput!) {\n    upVoteMeme(input: $input) {\n      id\n      upVotes\n    }\n  }\n`;\n\nconst DOWN_VOTE_MEME = gql`\n  mutation downVoteMeme($input: VoteInput!) {\n    downVoteMeme(input: $input) {\n      id\n      downVotes\n    }\n  }\n`;\n\nconst UP_VOTE_MADE = gql`\n  subscription upVoteMade($input: VoteInput!) {\n    upVoteMade(input: $input) {\n      id\n      upVotes\n    }\n  }\n`;\n\nconst DOWN_VOTE_MADE = gql`\n  subscription downVoteMade($input: VoteInput!) {\n    downVoteMade(input: $input) {\n      id\n      downVotes\n    }\n  }\n`;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n  commentChip: {\n    margin: 8,\n  },\n}));\n\nfunction MemesCard(props) {\n  const classes = useStyles();\n\n  const [meme, setMeme] = useState(props.meme);\n  const [isCommentsModelOpen, setCommentsModalOpen] = useState(false);\n  const [isImageModalOpen, setImageModalOpen] = useState(false);\n\n  const [upVoteMeme, { loading: upVoting }] = useMutation(UP_VOTE_MEME);\n  const [downVoteMeme, { loading: downVoting }] = useMutation(DOWN_VOTE_MEME);\n\n  useSubscription(UP_VOTE_MADE, {\n    variables: { input: { memeId: meme.id } },\n    onSubscriptionData: ({\n      subscriptionData: {\n        data: { upVoteMade },\n      },\n    }) => {\n      setMeme({\n        ...meme,\n        upVotes: upVoteMade.upVotes,\n      });\n    },\n  });\n  useSubscription(DOWN_VOTE_MADE, {\n    variables: { input: { memeId: meme.id } },\n    onSubscriptionData: ({\n      subscriptionData: {\n        data: { downVoteMade },\n      },\n    }) => {\n      setMeme({\n        ...meme,\n        downVotes: downVoteMade.downVotes,\n      });\n    },\n  });\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardHeader\n          avatar={<Avatar className={classes.avatar}>{meme.author[0]}</Avatar>}\n          action={\n            <IconButton aria-label=\"more\">\n              <MoreVertIcon />\n            </IconButton>\n          }\n          title={meme.author}\n          subheader={fromNow(meme.dateCreated)}\n        />\n        <CardMedia\n          className={classes.media}\n          image={meme.imageUrl}\n          onClick={() => {\n            if (!isImageModalOpen) {\n              setImageModalOpen(true);\n            }\n          }}\n        />\n        <CardActions disableSpacing>\n          <IconButton\n            aria-label=\"up vote meme\"\n            onClick={() => upVoteMeme({ variables: { input: { memeId: meme.id } } })}\n          >\n            {upVoting ? <CircularProgress /> : meme.upVotes}\n            <ArrowUpwardRoundedIcon />\n          </IconButton>\n          <IconButton\n            aria-label=\"down vote meme\"\n            onClick={() => downVoteMeme({ variables: { input: { memeId: meme.id } } })}\n          >\n            {downVoting ? <CircularProgress /> : meme.downVotes}\n            <ArrowDownwardRoundedIcon />\n          </IconButton>\n          <IconButton onClick={() => setCommentsModalOpen(!isCommentsModelOpen)} aria-label=\"show comments\">\n            {meme.lastComments.length}\n            <ChatRoundedIcon />\n          </IconButton>\n        </CardActions>\n      </Card>\n      {isImageModalOpen && (\n        <Lightbox\n          medium={meme.imageUrl}\n          showRotate={false}\n          hideZoom={true}\n          alt={meme.title}\n          onClose={() => setImageModalOpen(false)}\n        />\n      )}\n      <MemeCommentsDialog isOpen={isCommentsModelOpen} meme={meme} onDialogClose={() => setCommentsModalOpen(false)} />\n    </>\n  );\n}\n\nexport default MemesCard;\n","import { useQuery } from '@apollo/react-hooks';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport gql from 'graphql-tag';\nimport React from 'react';\nimport MemesCard from '../memecard/MemeCard';\n\nconst GET_MEMES = gql`\n  {\n    memes {\n      id\n      title\n      author\n      imageUrl\n      dateCreated\n      upVotes\n      downVotes\n      lastComments(last: 3) {\n        content\n      }\n    }\n  }\n`;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: 16,\n  },\n}));\n\nfunction MemesList(props) {\n  const classes = useStyles();\n\n  const { loading, error, data, refetch } = useQuery(GET_MEMES);\n\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error}`;\n\n  if (props.refetch) refetch();\n\n  return (\n    <Grid className={classes.root} container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={2}>\n      {data.memes\n        .filter(\n          (meme) => props.filter === '' || meme.title.includes(props.filter) || meme.author.includes(props.filter)\n        )\n        .map((meme) => (\n          <Grid item key={meme.id} xs={12} sm={6}>\n            <MemesCard meme={meme} />\n          </Grid>\n        ))}\n    </Grid>\n  );\n}\n\nexport default MemesList;\n","import AppBar from '@material-ui/core/AppBar';\nimport Fab from '@material-ui/core/Fab';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport AddIcon from '@material-ui/icons/Add';\nimport SearchIcon from '@material-ui/icons/Search';\nimport React, { useState } from 'react';\nimport AddMemeDialog from './meme/addmemedialog/AddMemeDialog';\nimport MemesList from './meme/memeslist/MemesList';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: '12ch',\n      '&:focus': {\n        width: '20ch',\n      },\n    },\n  },\n  fab: {\n    margin: theme.spacing.unit, // You might not need this now\n    position: 'fixed',\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n}));\n\nfunction Home() {\n  const classes = useStyles();\n\n  const [isDialogOpen, setDialogOpen] = useState(false);\n  const [refetch, setRefetch] = useState(false);\n  const [filter, setFilter] = useState('');\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            MemeBz\n          </Typography>\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              placeholder=\"Search…\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              inputProps={{ 'aria-label': 'search' }}\n              onChange={(e) => setFilter(e.target.value)}\n            />\n          </div>\n        </Toolbar>\n      </AppBar>\n      <MemesList filter={filter} refetch={refetch} />\n      <AddMemeDialog\n        isOpen={isDialogOpen}\n        onDialogClose={(refetch) => {\n          setDialogOpen(false);\n          setRefetch(refetch);\n        }}\n      />\n      <Fab className={classes.fab} color=\"secondary\" aria-label=\"edit\" onClick={(e) => setDialogOpen(true)}>\n        <AddIcon />\n      </Fab>\n    </>\n  );\n}\n\nexport default Home;\n","import { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloClient } from 'apollo-client';\nimport { split } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport React from 'react';\nimport Home from './Home';\n\nconst httpUrl =\n  process.env.REACT_APP_BUILD === 'devel' ? 'http://localhost:4000/graphql' : 'https://memebz.herokuapp.com/graphql';\nconst webSocketUrl =\n  process.env.REACT_APP_BUILD === 'devel' ? 'ws://localhost:4000/graphql' : 'wss://memebz.herokuapp.com/graphql';\n\n// Create an http link:\nconst httpLink = new HttpLink({\n  uri: httpUrl\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: webSocketUrl,\n  options: {\n    reconnect: true\n  }\n});\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Home />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-roboto';\nimport App from './components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}